% Introduction to Bioinformatics
% Lesson 1 - Gestalt & remote access


# First things first

Did you

* read the first couple chapters?
* successfully ssh into `rhino`?


# Introductions

* Name
* What you're working on
* Experience


# What you'll get from this class

* High level overview of how to _approach_ bioinformatics
* Basic bioinformatics technical skills
* Enough momentum to initiate self-learning process


# What you won't get from this class

...but that might be useful:

* Higher level programming
* Statistics
* Other mathematics
* Knowledge of every bioinformatics program/method ever created

But hopefully you'll have enough momentum to learn these on your own as needed.


# Please spend _some_ time outside class

* Time is the only way to learn these things
* The waiting list is very long


# Overview of class

1. Gestalt & remote access
2. Unix shell - overview/intro
3. Unix shell - scripting & advanced tools
4. Version control with git
5. Python - syntax & types
6. Python - data structures
7. Python - writing a program


# Today

* 1/2 overview
* 1/2 remote access & Unix environment


# Why computers?

<br/>

**DATA**


# Biology data

We can now get it

* Cheaper & Faster

=>

* We have more of it


# To understand biology, we need to understand data

<br/>

**ENTER BIOINFORMATICS**


# What is bioinformatics?

The art of applying computation towards the analysis of biological data


# Aspects of Bioinformatics

Things we typically do with data:

munging | exploration | draw conclusions


# Data munging

* Cleaning data
* Transforming data


# Data exploration

* Visualize
* Build intuition
* Hypothesize


# Building conclusions

In which we shore things up to tell the world...

* Statistical analysis
* More visualization


# Rinse and repeat...

New insights and conclusions lead to new data and questions, etc.


# So this is _what_ we do

<br/>

## But _how_ should we do it?


# Specific goals for research

* Reproducibility
* Robustness
* Accuracy
* Clarity
* Iterability


# Things we can do towards these goals

immutability | documentation | automation


# Treat data as immutable!

**Never** change data in place; data in, data out.

Aids: reproducibility, clarity & iterability


# Document **everything**!!!

Hopefully you're already doing this with your biology work (lab notebook).

Bioinformatics should be no different.

* Software versions
* Settings used to run things
* Reasoning behind the way you do things
* How/when you got your data

Aids: reproducibility, clarity


# The best documentation is automation

Write _scripts_ (little computer programs) for everything:

* Munging
* Plotting
* Statistics
* Build scripts (tying it all together)

Aids: reproducibility, robustness, accuracy, iterability


# Guiding principals & practices towards this end

Unix philosophy | project/data organization


# The Unix Philosophy

* Small, composable tools that do one thing right
* Plumb tools together into pipelines & scripts
* Embrace plain-text data

Bioinformatics naturally embraces this.


# Project & data layout

Being consistent aids in automation & clarity

* naming schemes
* path schemes

_Note: I use a somewhat different organizational scheme than the book's author.
Find what works for you..._


# Project layout

Here's how I typically organize things:


```text
your-project
├── README.md
├── build.sh
├── data
│   ├── sequences.fasta
│   └── metadata.csv
├── scripts
│   ├── clean.py
│   └── plot.R
└── output
    ├── alignment.fasta
    ├── cleaned_metadata.csv
    ├── tree.newick
    └── tree_plot.png
```


# Questions?


# The Unix environment

Unix is a proprietary operating system from the 60s.

True Unix isn't frequently encountered these days, but its philosophy and approach to computing have thrived in "Unix-like" systems.
So much so that when we say "Unix", we usually mean it in the abstract sense.

We'll be using Ubuntu Linux, a Unix-like operating system.


# The Unix shell

One of the core aspects of the Unix environment is the _Unix shell_.

The shell is just a wrapper around the operating system, through which we can use text commands and output to interact with our computer.

This is analogous to the desktop environment on your personal computer, which has a graphical rather than a textual user interface.


# Remote servers

Unix was built for remote access, since computers were big and expensive.


# Why we care about remote servers

* The Hutch servers are really powerful
* We can leave long running computations running without worrying about our computer shutting down by necessity or accident
* We can access running programs and data from any computer capable of connecting to the remote server
* We can distribute tasks across compute clusters, such as the one the hutch has (See [gizmo class](http://www.fredhutch.io/events/2015/05/20/spring-2015-unix-hpc/))


# SSH for remote connection

Do this however you figured out how to do it for your OS.

```
ssh <username>@rhino
```

Write down which rhino you connect to, so you can directly connect to that next time.

(e.g If you get connected to `rhino03`, next time use `ssh <username>@rhino03`.)


# You're now in a Unix shell!

We'll cover things more thoroughly next class.
For now just some very basic information for orientation.


# Brief overview of a Unix command

`command [flags] [operands]`

Example: `ls -a ~`

* `ls`: The command, for listing directory contents
* `-a`: A flag which specifies that hidden files should be listed
* `~`: An operand, in this case a special symbol which points to your home directory


# Getting help for a Unix command

Most Unix programs will take either a `-h`, `--help`, or `-help` flag and return useful information about how to construct a valid command.

Some commands also have _man pages_, which you can access using `man <command-name>`.

Example: `ls --help`


# Let's get some more practice with simple commands


# Create a project directory

This class will build around analysis of a single data set, so let's set up a project directory for it.

    mkdir ~/bioinfclass

    cd ~/bioinfclass
    pwd

    mkdir data output scripts

    touch README.md


# Download data with `wget`

    wget https://raw.githubusercontent.com/fredhutchio/intro-bioinformatics/gh-pages/data.tar

Note that we get a `tar` file.
This is an archive type, like `zip`, common on Unix systems.


# Unpacking the tar

    tar -vxf data.tar


# Let's look at what we've done

`tree` prints out a directory tree as ASCII art.

    tree


# Let's explore the sequence file

`cat` prints the output of file[s] to the screen.

    cat data/sfv.fasta


# Now with `less`

`less` lets us "page" through data, without flooding the screen.

    less data/sfv.fasta

<br/>

Press the `q` key to exit from `less`.


# Now let's look at the metadata

    less data/sfv.csv


# Supercharging our shell

SciComp has set up a _module_ system for setting up custom environments.

We'll be using the `intro-bio` module, loaded by executing `module load intro-bio` (note: this *only affects the current shell session!*).
When you do this, you should see something like:

```
matsen@rhino01:~$ module load intro-bio
Using already loaded python
matsen@rhino01:~$
```
If you get an error message instead, let us know, because you can't proceed without this module loaded.


# Tmux - Terminal multiplexer

This is a tool that let's us have multiple Unix shells running at once.

We could just open multiple terminal windows, each with an ssh connection into the remote server.
But with tmux, if we close or lose our connection to the server, our terminal session doesn't get killed; running programs keep running.


# Setting up tmux

We'll use tmux throughout this class to keep sessions running.
But first let's download a nice tmux configuration file for making things easier.

    # This is a command that download
    wget https://raw.githubusercontent.com/fredhutchio/intro-bioinformatics/gh-pages/config/tmux.conf

    ls

    # tmux knows to look for our config file at ~/.tmux.conf
    mv tmux.conf ~/.tmux.conf

    # Note that this file is hidden once we make it a "dotfile"
    ls ~
    ls -a ~


# Starting a new tmux session

    tmux

You should now see a fresh shell session inside of tmux.


# Quick tmux cheatsheet

* `Ctrl-a` - your "Command key"
* `Ctrl-a ?` - Help
* `Ctrl-a d` - Detatch session

<br/>

* `Ctrl-a c` - New window
* `Ctrl-a <Space>` - Next window


# Looking at tmux in action

Why we might want to use tmux:

* Keep working on other things while a long running computation runs
* Switch back and forth quickly between multiple projects

Let's see an example.


# Making a sequence alignment

```bash
# First start the long running alignment
muscle -maxiters 2 -in data/sfv.fasta -out output/alignment.fasta

# Get bored waiting and want to work on something else...
<Ctrl-a c> # create new window
cd ~
mkdir new-project
cd new-project
mkdir data output scripts

# Let's go check on our alignment
<Ctrl-a <Space>>

# Still running... switch back; etc.
```


# Attaching and detaching tmux

SSH sessions can disconnect because of:

* a lost network connection
* a computer shutdown (power outage; frozen screen; system updates; etc.)

We might also stop work on one machine and pick it up on another.

<br>

**Note:** if you get a "command not found" error, you probably need to re-load your modules, but tmux will keep those modules loaded per shell window.


# Detaching and attaching a tmux session

1. Close your terminal window, and ignore any warning prompts.
2. Reconnect just the way you did at the beginning of the class.
3. Type `tmux attach` to attach.


# Manual detach

While in tmux, we can explicitly detach using `<Ctrl-a d>` or by typing `tmux detatch`.

Try doing this and then reattaching.


# Checking on our alignment

Yay! It's done!

```bash
less output/alignment.fasta
```


# Questions?


# Homework

Recommended reading:

* Chapters 1 & 2 if you haven't already.
* Chapters 2 & 3 for basic Unix stuff & tmux.

Reading for next class:

* Chapter 3, and chapter 7 (till around page 148).


# Resources

* These slides: <http://fredhutchio.github.io/intro-bioinformatics>
* Unix command reference: <https://ubuntudanmark.dk/filer/fwunixref.pdf>
* Tmux tutorial: <http://www.fredhutch.io/articles/2014/04/27/terminal-multiplex>

