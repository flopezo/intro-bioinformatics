% Introduction to Bioinformatics
% Lesson 1 - Gestalt & remote access


# Introductions

* Name
* What you're working on
* Experience


# What you'll get from this class

* High level overview of how to _approach_ bioinformatics
* Basic bioinformatics technical skills
* Enough momentum to initiate self-learning process


# What you won't get from this class

...but that might be useful:

* Higher level programming
* Statistics
* Other mathematics
* Knowledge of every bioinformatics program/method ever created

But hopefully you'll have enough momentum to learn these on your own as needed.


# Please spend _some_ time outside class

* Time is the only way to learn these things
* The waiting list is > 150 long


# Overview of class

1. Gestalt & remote access
2. Unix shell - overview/intro
3. Unix shell - scripting & advanced tools
4. Version control with git
5. Python - syntax & types
6. Python - data structures
7. Python - writing a program


# Today

* 1/2 overview
* 1/2 remote access & practicum


# Why computers?

<br/>

**DATA**


# Biology data

We can now get it

* Cheaper & Faster

=>

* We have more of it


# To understand biology, we need to understand data

<br/>

**ENTER BIOINFORMATICS**


# What is bioinformatics?


# From the book

(edited)

> A jazz musician can walk into a nightclub, hear a familiar song, recognize the chord changes, and begin playing musical ideas over these chords.
> Likewise, a bioinformatician may receive a huge sequencing data set, and immediately start using a set of tools to learn about the data, and see what story the data tell.
>
> ...
> In both cases learning one’s tools is a necessary, but not sufficient step...


# From the "Bird", Charlie Parker

> You've got to learn your instrument.
> Then, you practice, practice, practice.
> And then, when you finally get up there on the bandstand, forget all that and just wail.

Also phrased as

> Learn the changes, then forget them.


# My summary

## Bioinformatics is more than the sum of the pieces

There is an art to putting the technical pieces together to make science happen.


# Aspects of Bioinformatics

Categories of things we typically do:

munging | exploration | conclusions


# Data munging

* Cleaning data
* Transforming data


# Data exploration

* Visualize
* Build intuition
* Hypothesize


# Building conclusions

In which we shore things up to tell the world...

* Statistical analysis
* More visualization


# So this is _what_ we do

<br/>

## But _how_ should we do it?


# Specific goals for research

* Reproducibility
* Robustness
* Accuracy
* Clarity
* Iterability


# Things we can do towards these goals

immutability | documentation | automation


# Treat data as immutable!

**Never** change data in place; data in, data out.

Aids: reproducibility, clarity & iterability


# Document **everything**!!!

Hopefully you're already doing this with your biology work.

Bioinformatics should be no different.

* Software versions
* Settings used to run things
* Reasoning behind the way you do things
* How/when you got your data

Aids: reproducibility, clarity


# The best documentation is automation

Write _scripts_ for everything:

* Munging
* Plotting
* Statistics
* Build scripts (tying it all together)

Aids: reproducibility, robustness, accuracy, iterability


# Guiding principals & practices towards this end

Unix philosophy | project organization


# The Unix Philosophy

* Small, composable tools that do one thing right
* Plumb tools together into pipelines/scripts
* Embrace plain text/data (no excel/docx)

Bioinformatics naturally embraces this (more so than most data science).


# Project layout

Bottom line: Being consistent aids in automation & clarity:

* naming schemes
* path schemes

_Note: I use a somewhat different organizational scheme than the book's author.
Find what works for you..._


# Project layout

Here's how I typically organize things:


```text
your-project
├── README.md
├── build.sh
├── data
│   ├── sequences.fasta
│   └── metadata.csv
├── scripts
│   ├── clean.py
│   └── plot.R
└── output
    ├── alignment.fasta
    ├── cleaned_metadata.csv
    ├── tree.newick
    └── tree_plot.png
```


# Practicum!

But first, **Questions?**


# Fire up NoMachine

Open no machine, and click the "New" button in the orange bar.
Name your connection, so you'll remember what it is (lynx/manx).

1. The protocol is **NX**
2. The host is **lynx** or **lynx.fhcrc.org** or **manx** or **manx.fhcrc.org**, port **4000**
3. The authentication is **Password**
4. **Don't use a proxy**
5. Name your connection so you can remember what it is.


# Open a terminal

1. Click the square button in the upper left.
2. Type in "Terminal"
3. Click on the Terminal icon (the one with `>_` on it)


# Brief overview of a Unix command

`command <flags> <operands>`

Example: `ls -a ~`

* `ls`: The command, for listing directory contents
* `-a`: A flag (short), which specifies that hidden files should be listed
* `~`: An operand, in this case a special symbol which points to your home directory


# SSH into rhino

1. Enter `ssh rhino` into the terminal
2. Enter your Hutch password when prompted
3. Note the machine to which you're connected (e.g. `rhino02` v `rhino04`)


# Download tmux.conf & fire up tmux

    wget https://raw.githubusercontent.com/fredhutchio/intro-bioinformatics/gh-pages/config/tmux.conf

    ls

    mv tmux.conf ~/.tmux.conf

    ls
    ls -a

    tmux


# Quick tmux demo

* `Ctrl-a` - your "Command key"
* `Ctrl-a ?` - Help
* `Ctrl-a d` - Detatch session

<br/>

* `Ctrl-a c` - New window
* `Ctrl-a <Space>` - Next window


# Create a project directory

    mkdir ~/bioinfclass

    cd ~/bioinfclass
    pwd

    mkdir data output scripts

    touch README.md


# Dowload data with `wget`

    wget https://raw.githubusercontent.com/fredhutchio/intro-bioinformatics/gh-pages/data.tar


# A bit about tar...

^imghl "figures/tar.png" 300


# It's not _that_ bad

    tar -vxf data.tar

This unpacks the data into the `data` dir for us.

Use `tar --help` when you need help.

(Also see `gunzip` and `gzip` for `.zip` files.)


# Let's look at what we've done

    tree


# First let's explore the sequence file

    cat data/sfv.fasta


# Now with `less`

    less data/sfv.fasta


# Now let's look at the metadata

    less data/sfv.csv


# Now with `column -t`

    column -t -s , data/sfv.csv

* `-t` Output as tab separated
* `-s ,` Read the input data as comma separated


# Now with `column -t` and `|`

    column -t -s , data/sfv.csv | less -S

`|` takes the output of one command and passes it as input to the next.
This is part of the Unix philosophy's composability.


# Hello world!

## Make an alignment, and then a tree from the data

    muscle -maxiters 2 -in data/sfv.fasta -out output/alignment.fasta

    FastTree -nt output/alignment.fasta > output/tree.nw

    nw_display output/tree.nw | less


# Resources

* These slides: <http://fredhutchio.github.io/intro-bioinformatics>
* Unix command reference: <https://ubuntudanmark.dk/filer/fwunixref.pdf>
* Tmux tutorial: <http://www.fredhutch.io/articles/2014/04/27/terminal-multiplex>

