% Introduction to Bioinformatics
% Lesson 6 - Object Oriented Programming with Python


# Object Oriented Programming

## OOP: yeah, you know me...

_Wherein from simple elements we construct towering monuments_


# What we'll cover today

* What _is_ OOP?
* Why do we _care_ about OOP?
* How do I _use_ OOP?
* How do I _do_ OOP?
* How hard _should_ I OOP?


# What is OOP?

OOP is a way of writing programs which emphasizes bundling data and functionality.


# Why do we have OOP?

Before OOP, large programs were often difficult to analyze.
It was hard to keep track of all the different data and functionality.

OOP is a way of organizing data and functionality such that it's easier to conceptualize how they relate to each other.
The goal is to make it easier to conceptualize the whole system.


# The Objects in OOP

Objects are entities which bundle data and behavior related to that data.
The data is organized into _attributes_ and the behavior into _methods_.

Objects are usually mutable: Methods can modify (in place) the attributes of a given object.


# Classes

_Classes_ are a way of defining the shape and behavior of objects.
In class based OOP, we say that objects are _instances_ of a class.

Example: the string `"cat"` is an instance of the class `str`.

Class based OOP is the most common form in modern languages.
In particular, python's OOP is class based.


# That's it in a nutshell

Any questions?


# How do I use other's OOP

This is the easy part.

Even if you don't create your own objects/classes, you can still consume other folk's OOP.


# A pertinent example

Let's look at the Biopython library (this should be accessible as long as you've loaded your python modules).

```python
# First import the namespace/module
import Bio.SeqIO as SeqIO

# Next, create a sequence parser, specifying file and format
seqrecords = SeqIO.parse("data/sfv.fasta", "fasta")

# Now let's inspect things a bit (bonus: intro to generators!)
seqrecords
# You can use the `next` method to get the "next" thing from a generator.
seqrecords.next()
seqrecords.next()
```


# Let's look at one of these `seqrecords` in more detail

```
# More investigating
seqrecord = seqrecords.next()
seqrecord
type(seqrecord)
```

# Attributes

Objects have _attributes_.
You can see what attributes an object has with `dir(object)`, and access them with `object.attribute_name`.

```
dir(seqrecord)
seqrecord.name
```


# Let's look at the seqrecord's `seq`

```
# Here's where the actual "sequence" is
seqrecord.seq
s = seqrecord.seq
type(s)
dir(s)
```

So an attribute of an object can be another object.


# Attributes can be functions

```python
s.transcribe

# You can call these functions just like normal functions (appending `(...)`)
s.transcribe()

# This returns the transcription of sequence s
```

We call functions bound to objects _methods_.
Methods describe the "behavior" of objects.


# That's it for _using_ OOP

* Construct objects
* Access object attributes
    * `object.attributename`
* Call methods on objects
    * methods are just functions bound to objects as attributes of those objects
    * `object.method(arguments)`

Any Questions?


# How do _I_ OOP?

A simple class, modeling data we saw last week:
<!--Switch over to SeqRecord right off the bat-->

```python
# First we specify the name of the class
class Person(object):
    # This function gets called on new objects
    def __init__(self, name, age, occupation):
        # setting up attributes
        self.name = name
        self.age = age
        self.occupation = occupation

p = Person("Bob Jones", 42, "haxxor")
print p
```


# What about the functionality bit

Suppose we add email (this is pretend code & won't run):

```python
import email

class Person(object):
    def __init__(self, name, age, occ, email):
        self.name = name
        self.age = age
        self.occupation = occ
        self.email = email

    def notify_via_email(self, message):
        email.send(self.email, message)

p = Person("Bob Jones", 42, "haxxor", "bob@jon.es")
# Here, notify_via_email is "bound" to p
p.notify_via_email("your cat was found")
```

# Some things about what just happened

(And how this all works)

* When we define class `Person`, we get a _constructor_ function named `Person` that returns an _instance_ of class `Person`.
* When this function is called, a blank object gets created, and the `__init__` function is called with `self` bound to the new object.
* This function _initializes_ the object.
* Other methods follow the same pattern; when we call `p.notify_via_email`, the `notify_via_email` function gets called with object `p` as the first argument.


# Let's contrast this with non-OOP

```python
import email

def notify_via_email(person, message):
    email.send(person["email"], message)

# This is just another way of creating a dictionary
p = dict(name="Bob Jones", age=42,
        occupation="haxxor", email="bob@jon.es")
notify_via_email(person, "your cat was found")
```

<!--Would have to come up with a similar example like this if I want to switch to SeqRecord right off the bat-->

Shorter, but it's less clear in `notify_via_email` what valid input is.
Classes make this patent/explicit.


# What if a company also has an email?

<!--It'll be really hard to capture this moral moving to SeqRecord right away-->

OOP: Have to write a separate method in the `Company` class. (There are other ways around this, but they're a bit of work).

Non-OOP: As long as the `company` dictionary has an `"email"` key/value pair, the function will still work.

Moral of the story: Structure can come at the cost of flexibility.


# Pretend Biopython didn't exist

Let's create it.
Start by creating a python script file in `scripts/seqs.py` using nano (`nano scripts/seqs.py`).

```python
class SeqRecord(object):
    def __init__(self, name, seq):
        self.name = name
        self.seq = seq

s = SeqRecord("MBG234Gag1", "AGCTGTCGGTAAGTCGAGT")
print s.name
print s.seq
```

You can run this with `python scripts/seqs.py`.


# Now let's add some functionality

In `scripts/seqs.py` add:

```python
class SeqRecord(object):
    # ...

    def fasta_string(self):
        string_rep = ">" + self.name + "\n"
        string_rep += self.seq + "\n"
        return string_rep

s = SeqRecord("MBG234Gag1", "AGCTGTCGGTAAGTCGAGT")
print s.fasta_string()
```

Run again and see what happens.


# Making the `seq` more robust

Suppose we want to add more functionality to the `seq` attribute.

```python
# Here we create a "subclass" of str
class Seq(str):
    # Here we default to str's init, etc
    pass

s = Seq("ACGT")
print s
```

Note: Creating a subclass of builtins like `str` is sometimes discouraged, but it's fine for illustrative purposes.


# Adding functionality to `Seq`

```python
class Seq(str):
    # A class variable, available to all seqs
    complements = dict(A="T", T="A", C="G", G="C")
    def complement(self):
        # Create list of complemented characters
        bps = [self.complements[bp] for bp in self]
        # Join characters together, and Seq them
        joined_bps = "".join(bps)
        retrun Seq(joined_bps)

s = Seq("ACGT")
print s.complement()
```

# Note the _class variable_

```python
# The class and instances both get this attribute
print Seq.complements
print s.complements

# You can change it in the objects, but the class won't change
s.complements = "something else"
print s.complements
print Seq.complements
```

Note: `complements` here would typically be called a _class variable_, since all members of the class have access to it.
The codecademy course calls them _member variables_, which is a more general term you don't hear as often.
The _instance variables_ we've seen before (like `seqrecord.name`) are also considered member variables.
Usually we want to be specific (I don't hear "member variable" used frequently).


# What about RNA vs DNA?

We can solve this using _subclasses_.

```python
class Seq(str):
    # Same method as before...
    def complement(self):
        bps = [self.complements[x] for x in self]
        joined_bps = "".join(bps)
        return Seq(joined_bps)

# But we move the class variable into subclasses
class DNASeq(Seq):
    complements = dict(A="T", T="A", C="G", G="C")

class RNASeq(Seq):
    complements = dict(A="U", U="A", C="G", G="C")
```


# Testing our subclasses

```python
# Testing out our new classes
s = DNASeq("ACTG")
print s.complement()
s = RNASeq("ACUG")
print s.complement()

# Does our old class work by itself any more?
s = Seq("ACTG")
print s.complement()
```


# Woops! A bug!

When we take the complement, we get a `Seq`, but we should get either a `DNASeq` or an `RNASeq` (as appropriate)!

```python
s = DNASeq("ACTG")
print type(s.complement())
s = RNASeq("ACUG")
print type(s.complement())

# Now we can't take complement of the complement...
s.complement().complement()
```

Try solving this for homework :-) (Solution at end of slides)


# That's all we'll look at for doing OOP

Any Questions?


# How hard should I OOP?

Your call.
Choose wisely.


# One choice: Everything OOP, all the time

**Extreme Example:** Java.
Even printing "hello world" then exiting requires creating a class.
All data and functionality _must_ be bound to classes/objects.

**The good with OOP:**
Easier to conceptualize, because we can think about programs being made of things, like we do in the real world.

**The bad:**
Extra work, and code can become siloed and difficult to generalize or share between different parts of the program.


# My recommendation

OOP is strong medicine; don't overuse it.

Python gives us a choice here.
Use classes when they help you conceptualize complexity.
Avoid when they add complexity.

Try starting with plain functions.
If you find yourself having trouble figuring out what functions should be getting which data, consider bundling things into classes.


# Homework challenges

(Answers at end of slides)


# HW 1 - `transcribe`

**Problem**: Add a `transcribe` method to the `DNASeq` class and a `reverse_transcribe` method to the `RNASeq` class.

<br/>

SideNote: biopython does this differently;
Only _one_ Seq class, and an `alphabet` attribute pointing to DNA/RNA.
In this approach, calling `reverse_transcribe` on a `Seq` instance with a DNA alphabet gives an error.
In contrast, with our approach `reverse_transcribe` is _only defined_ if the `Seq` is an `RNASeq`.

Thinking through these architectural trade-offs is important in OOP.

 
# HW 2 - `reverse_complement`

* Add a `reserve_complement` method to your `Seq` class, such that:
    * The method works with both `DNASeq` and `RNASeq` objects.

# HW 3 - `reverse_complement` (ctnd)

* Add a `reverse_complement` method in your `SeqRecord` class, which returns a new seqrecord with:
    * `seq` attribute the `reverse_complement` of the original sequence.
    * a modified `name` attribute (append `"_rc"` to the original name).


# Bonus HW problem

* Make it so that when you create an instance of `SeqRecord`, you can just pass in a string for seq, and it will figure out whether it's a `DNASeq` or a `RNASeq` based on whether it contains U or and T:
    * Should error out if it can't tell.
    * Should still be possible to pass in an `RNASeq` or `DNASeq` directly, without it checking.


# Bonus HW problem 2

Fix up the `Seq`, `RNASeq` and `DNASeq` class definitions so that `DNASeq.complement` returns a `DNASeq` object (similarly for `RNASeq`).
Ideally:

* Most of the `complement` code stays in the `Seq` class definition
* Override the `Seq.complement` definition in `RNASeq` and `DNASeq` so that the return value is casted as the correct class

Hint: To solve this "ideally", look into python's `super` function.


# Resources

* See the codecademy section on classes (beware the bit on "member variables")
* Documentation on `transcbribe`: http://biopython.org/DIST/docs/api/Bio.Seq.Seq-class.html#transcribe (click the "source code" link to see the source code)

[Back to homepage](http://fredhutchio.github.io/intro-bioinformatics)


# Homework solutions:

Spoiler alert!


# HW 1

First the simple solution:

```python
class DNASeq(Seq):
    # ...
    transcriptions = dict(T="U")
    def transcribe(self):
        # Note use of get
        bps = [self.transcriptions.get(bp, bp) for bp in self]
        joined_bps = "".join(bps)
        return RNASeq(joined_bps)

class RNASeq(Seq):
    # ...
    transcriptions = dict(U="T")
    def reverse_transcribe(self):
        bps = [self.transcriptions.get(bp, bp) for bp in self]
        joined_bps = "".join(bps)
        return DNASeq(joined_bps)

s = DNASeq("ACGT")
print "Transcription of", s, "is:", s.transcribe()

s = RNASeq("ACGU")
print "Reverse trans of", s, "is:", s.reverse_transcribe()
```


# HW 1 (ctnd)

This works, but note that it's a lot of duplicate code.
We'll see a more elegant way to solve this using `super` (see Bonus problem 2).


# HW 2

First let's solve this without worrying too much about the return type (just ensuring it's a Seq).

```python
class Seq(str):
    # ...
    def reverse_complement(self):
        # Take the complement and reverse the bps
        bps = reversed(self.complement())
        joined_bps = "".join(bps)
        return Seq(joined_bps)

s = DNASeq("ACGTCC")
print "Reverse comp of", s, "is:", s.reverse_complement()

s = RNASeq("ACGUCC")
print "Reverse comp of", s, "is:", s.reverse_complement()

```


# HW 2 (ctnd)

Note that if we felt like being more terse, we could omit all the intermediate variable assignments and just do everything in one line.
You can decide for yourself what makes code most readable.

```python
class Seq(str):
    # ...
    def reverse_complement(self):
        return Seq("".join(reversed(self.complement())))
```


# Bonus 1

First, we'll solve this just using simple string methods.

```python
class SeqRecord(object):
    def __init__(self, name, seq):
        self.name = name
        # We'll assume a sequence without U or T is a DNASeq
        if seq.count("T") >= 0 and seq.count("U") == 0:
            seq = DNASeq(seq)
        elif seq.count("U") > 0 and seq.count("T") == 0:
            seq = RNASeq(seq)
        else:
            # Then we have both U and T, so fail
            raise ValueError, "Seq can't have both U and T"
        self.seq = seq

    # ...

s = SeqRecord("MBG1234", "AGTCTGATA")
print "Seqrecord seq type:", type(s.seq)

s = SeqRecord("MBG1234", "AGUCUGAUA")
print "Seqrecord seq type:", type(s.seq)

# This one should fail
SeqRecord("MBG1234", "AGTCUGATA")
```


# Bonus 1 (ctnd)

This isn't the best solution:
Right now, only capital letters are considered. A good way to fix this would be to look into [regular expressions](https://docs.python.org/2/howto/regex.html).

There is always something to do to make your code better :-)


# Bonus 2

The simple solution to this is to just write two methods, like we did in the solution to HW 1.
However, there is a better way.

```python
class DNASeq(Seq):
    # ...
    def complement(self):
        # Here we use the superclass' method
        return DNASeq(Seq.complement(self))

class RNASeq(Seq):
    # ...
    def complement(self):
        return RNASeq(Seq.complement(self))

s = DNASeq("ACGT")
print "Type of complement of", s, "is:", type(s.complement())

s = RNASeq("ACGU")
print "Type of complement of", s, "is:", type(s.complement())
```


# Bonus 2 (ctnd)

Note: In the assignment, I suggested using `super` to solve this.
After looking for a good explanation of super as a reference, I found [this stackoverflow post](http://stackoverflow.com/a/1174118/177677), which gave me the idea to just refer to the unbound `Seq.complement` function directly.
I think this is a lot easier to understand, and it accomplishes the same thing.


# Revisiting HW 2

We can use this `super`-like trick to fix our solution to HW 2 as well:

```python
class DNASeq(Seq):
    # ...
    def reverse_complement(self):
        return DNASeq(Seq.reverse_complement(self))

class RNASeq(Seq):
    # ...
    def reverse_complement(self):
        return RNASeq(Seq.reverse_complement(self))

s = DNASeq("ACGTCC")
print "Type of reverse comp of", s, "is:", type(s.reverse_complement()
s = RNASeq("ACGUCC")
print "Type of reverse comp of", s, "is:", type(s.reverse_complement()
```


# Revisiting HW 1

Similarly, we can refactor `transcribe` and `reverse_transcribe`.

```python
class Seq(str):
    # ...
    def abstract_transcribe(self):
        bps = [self.transcriptions.get(bp, bp) for bp in self]
        joined_bps = "".join(bps)
        return Seq(joined_bps)


class DNASeq(Seq):
    # ...
    def transcribe(self):
        return RNASeq(Seq.abstract_transcribe(self))


class RNASeq(Seq):
    # ...
    def reverse_transcribe(self):
        return DNASeq(Seq.abstract_transcribe(self))
```


# Everything all together

```python
class Seq(str):
    def complement(self):
        bps = [self.complements[bp] for bp in self]
        joined_bps = "".join(bps)
        return Seq(joined_bps)

    def reverse_complement(self):
        return Seq("".join(reversed(self.complement())))

    def abstract_transcribe(self):
        bps = [self.transcriptions.get(bp, bp) for bp in self]
        joined_bps = "".join(bps)
        return Seq(joined_bps)


class DNASeq(Seq):
    complements = dict(A="T", T="A", C="G", G="C")
    transcriptions = dict(T="U")

    def complement(self):
        return DNASeq(Seq.complement(self))

    def reverse_complement(self):
        return DNASeq(Seq.reverse_complement(self))

    def transcribe(self):
        return RNASeq(Seq.abstract_transcribe(self))


class RNASeq(Seq):
    complements = dict(A="U", U="A", C="G", G="C")
    transcriptions = dict(U="T")

    def complement(self):
        return RNASeq(Seq.complement(self))

    def reverse_complement(self):
        return RNASeq(Seq.reverse_complement(self))

    def reverse_transcribe(self):
        return DNASeq(Seq.abstract_transcribe(self))



class SeqRecord(object):
    def __init__(self, name, seq):
        self.name = name
        # We'll assume a sequence without U or T is a DNASeq
        if seq.count("T") >= 0 and seq.count("U") == 0:
            seq = DNASeq(seq)
        elif seq.count("U") > 0 and seq.count("T") == 0:
            seq = RNASeq(seq)
        else:
            # Then we have both U and T, so fail
            raise ValueError, "Can't have a sequence with both U and T"
        self.seq = seq

    def fasta_string(self):
        string = ">" + self.name + "\n"
        string += self.seq + "\n"
        return string



s = DNASeq("ACGT")
print "Transcription of", s, "is:", s.transcribe()

s = RNASeq("ACGU")
print "Reverse transcription of", s, "is:", s.reverse_transcribe()

print ""


s = DNASeq("ACGT")
print "Complement of", s, "is:", s.complement()
print "Type of complement of", s, "is:", type(s.complement())

s = RNASeq("ACGU")
print "Complement of", s, "is:", s.complement()
print "Type of complement of", s, "is:", type(s.complement())

print ""


s = DNASeq("ACGTCC")
print "Reverse complement of", s, "is:", s.reverse_complement()
print "Type of reverse complement of", s, "is:", type(s.reverse_complement())

s = RNASeq("ACGUCC")
print "Reverse complement of", s, "is:", s.reverse_complement()
print "Type of reverse complement of", s, "is:", type(s.reverse_complement())

print ""


s = SeqRecord("MBG1234", "AGTCTGATA")
print "Seqrecord seq type:", type(s.seq)
#print s.fasta_string()

s = SeqRecord("MBG1234", "AGUCUGAUA")
print "Seqrecord seq type:", type(s.seq)

s = SeqRecord("MBG1234", "AGTCUGATA")

```


# This page left intentionally almost blank


